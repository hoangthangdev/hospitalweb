name: dockercompose15466942793411098815
services:
  app:
    build:
      context: D:\hospitalweb\HospitalWebAPI
      dockerfile: HospitalWebAPI/Dockerfile
      args:
        BUILD_CONFIGURATION: Debug
        LAUNCHING_FROM_VS: "true"
      labels:
        com.microsoft.created-by: visual-studio
        com.microsoft.visual-studio.project-name: HospitalWebAPI
    container_name: dotnet-app
    depends_on:
      elasticsearch:
        condition: service_started
        required: true
      redis:
        condition: service_started
        required: true
      sqlserver:
        condition: service_started
        required: true
    entrypoint:
      - C:\remote_debugger\x64\msvsmon.exe
      - /noauth
      - /anyuser
      - /silent
      - /nostatus
      - /noclrwarn
      - /nosecuritywarn
      - /nofirewallwarn
      - /nowowwarn
      - /fallbackloadremotemanagedpdbs
      - /timeout:2147483646
      - /LogDebuggeeOutputToStdOut
    environment:
      ConnectionStrings__DefaultConnection: Server=172.24.96.1,1433;Database=master;User Id=sa;Password=hospotal123@;Trust Server Certificate=True;
      ElasticSearch__Url: http://elasticsearch:9200
      Redis__Connection: redis:6379
    labels:
      com.microsoft.visual-studio.project-name: HospitalWebAPI
      com.microsoft.visualstudio.debuggee.arguments: ' --additionalProbingPath c:\.nuget\packages --additionalProbingPath c:\.nuget\fallbackpackages  "C:\app\HospitalWebAPI.dll"'
      com.microsoft.visualstudio.debuggee.killprogram: dotnet --roll-forward Major C:\VSTools\DistrolessHelper\DistrolessHelper.dll --stop dotnet
      com.microsoft.visualstudio.debuggee.program: '"C:\Program Files\dotnet\dotnet.exe"'
      com.microsoft.visualstudio.debuggee.workingdirectory: C:\app
    networks:
      mynetwork: null
    ports:
      - mode: ingress
        target: 8080
        published: "8080"
        protocol: tcp
    volumes:
      - type: bind
        source: C:\Users\Desktop\onecoremsvsmon\17.13.20109.5790
        target: c:\remote_debugger
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\Desktop\AppData\Roaming\ASP.NET\Https
        target: C:\Users\ContainerUser\AppData\Roaming\ASP.NET\Https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\Desktop\AppData\Roaming\ASP.NET\Https
        target: C:\Users\ContainerAdministrator\AppData\Roaming\ASP.NET\Https
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\Desktop\AppData\Roaming\Microsoft\UserSecrets
        target: C:\Users\ContainerUser\AppData\Roaming\Microsoft\UserSecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Users\Desktop\AppData\Roaming\Microsoft\UserSecrets
        target: C:\Users\ContainerAdministrator\AppData\Roaming\Microsoft\UserSecrets
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Sdks\Microsoft.Docker.Sdk\tools\win-x64\net8.0
        target: C:\VSTools
        read_only: true
        bind:
          create_host_path: true
      - type: bind
        source: C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\IDE\CommonExtensions\Microsoft\HotReload
        target: C:\HotReloadAgent
        read_only: true
        bind:
          create_host_path: true
  elasticsearch:
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      discovery.type: single-node
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    networks:
      mynetwork: null
    ports:
      - mode: ingress
        target: 9200
        published: "9200"
        protocol: tcp
      - mode: ingress
        target: 9300
        published: "9300"
        protocol: tcp
  frontend:
    build:
      context: D:\hospitalweb\HospitalWebAPI
      dockerfile: hospital.client/Dockerfile
    container_name: react-app
    depends_on:
      app:
        condition: service_started
        required: true
    networks:
      mynetwork: null
    ports:
      - mode: ingress
        target: 3000
        published: "3000"
        protocol: tcp
  redis:
    container_name: redis
    image: redis:latest
    networks:
      mynetwork: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
  sqlserver:
    container_name: sqlserver
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: hospotal123@
    image: mcr.microsoft.com/mssql/server:2022-latest
    networks:
      mynetwork: null
    ports:
      - mode: ingress
        target: 1433
        published: "1433"
        protocol: tcp
networks:
  mynetwork:
    name: dockercompose15466942793411098815_mynetwork
    driver: bridge